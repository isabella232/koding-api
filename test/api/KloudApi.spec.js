/**
 * Koding API
 * Koding API for integrating your application with Koding services
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KodingApi);
  }
}(this, function(expect, KodingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KodingApi.KloudApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('KloudApi', function() {
    describe('addAdmin', function() {
      it('should call addAdmin successfully', function(done) {
        //uncomment below and update the code to test addAdmin
        //instance.addAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bootstrap', function() {
      it('should call bootstrap successfully', function(done) {
        //uncomment below and update the code to test bootstrap
        //instance.bootstrap(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('build', function() {
      it('should call build successfully', function(done) {
        //uncomment below and update the code to test build
        //instance.build(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('buildStack', function() {
      it('should call buildStack successfully', function(done) {
        //uncomment below and update the code to test buildStack
        //instance.buildStack(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkCredential', function() {
      it('should call checkCredential successfully', function(done) {
        //uncomment below and update the code to test checkCredential
        //instance.checkCredential(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkTemplate', function() {
      it('should call checkTemplate successfully', function(done) {
        //uncomment below and update the code to test checkTemplate
        //instance.checkTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('destroy', function() {
      it('should call destroy successfully', function(done) {
        //uncomment below and update the code to test destroy
        //instance.destroy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('destroyStack', function() {
      it('should call destroyStack successfully', function(done) {
        //uncomment below and update the code to test destroyStack
        //instance.destroyStack(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('event', function() {
      it('should call event successfully', function(done) {
        //uncomment below and update the code to test event
        //instance.event(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('info', function() {
      it('should call info successfully', function(done) {
        //uncomment below and update the code to test info
        //instance.info(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('migrate', function() {
      it('should call migrate successfully', function(done) {
        //uncomment below and update the code to test migrate
        //instance.migrate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ping', function() {
      it('should call ping successfully', function(done) {
        //uncomment below and update the code to test ping
        //instance.ping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAdmin', function() {
      it('should call removeAdmin successfully', function(done) {
        //uncomment below and update the code to test removeAdmin
        //instance.removeAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restart', function() {
      it('should call restart successfully', function(done) {
        //uncomment below and update the code to test restart
        //instance.restart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stop', function() {
      it('should call stop successfully', function(done) {
        //uncomment below and update the code to test stop
        //instance.stop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
