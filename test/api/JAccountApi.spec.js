/**
 * Koding API
 * Koding API for integrating your application with Koding services
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KodingApi);
  }
}(this, function(expect, KodingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KodingApi.JAccountApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('JAccountApi', function() {
    describe('acceptInvitation', function() {
      it('should call acceptInvitation successfully', function(done) {
        //uncomment below and update the code to test acceptInvitation
        //instance.acceptInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('blockUser', function() {
      it('should call blockUser successfully', function(done) {
        //uncomment below and update the code to test blockUser
        //instance.blockUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('byRelevance', function() {
      it('should call byRelevance successfully', function(done) {
        //uncomment below and update the code to test byRelevance
        //instance.byRelevance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelRequest', function() {
      it('should call cancelRequest successfully', function(done) {
        //uncomment below and update the code to test cancelRequest
        //instance.cancelRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkGroupMembership', function() {
      it('should call checkGroupMembership successfully', function(done) {
        //uncomment below and update the code to test checkGroupMembership
        //instance.checkGroupMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('count', function() {
      it('should call count successfully', function(done) {
        //uncomment below and update the code to test count
        //instance.count(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('destroy', function() {
      it('should call destroy successfully', function(done) {
        //uncomment below and update the code to test destroy
        //instance.destroy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('expireSubscription', function() {
      it('should call expireSubscription successfully', function(done) {
        //uncomment below and update the code to test expireSubscription
        //instance.expireSubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchAppStorage', function() {
      it('should call fetchAppStorage successfully', function(done) {
        //uncomment below and update the code to test fetchAppStorage
        //instance.fetchAppStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchBlockedUsers', function() {
      it('should call fetchBlockedUsers successfully', function(done) {
        //uncomment below and update the code to test fetchBlockedUsers
        //instance.fetchBlockedUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchEmail', function() {
      it('should call fetchEmail successfully', function(done) {
        //uncomment below and update the code to test fetchEmail
        //instance.fetchEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchEmailAndStatus', function() {
      it('should call fetchEmailAndStatus successfully', function(done) {
        //uncomment below and update the code to test fetchEmailAndStatus
        //instance.fetchEmailAndStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchEmailFrequency', function() {
      it('should call fetchEmailFrequency successfully', function(done) {
        //uncomment below and update the code to test fetchEmailFrequency
        //instance.fetchEmailFrequency(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchEmailsByUsername', function() {
      it('should call fetchEmailsByUsername successfully', function(done) {
        //uncomment below and update the code to test fetchEmailsByUsername
        //instance.fetchEmailsByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchFromUser', function() {
      it('should call fetchFromUser successfully', function(done) {
        //uncomment below and update the code to test fetchFromUser
        //instance.fetchFromUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchGroups', function() {
      it('should call fetchGroups successfully', function(done) {
        //uncomment below and update the code to test fetchGroups
        //instance.fetchGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchKites', function() {
      it('should call fetchKites successfully', function(done) {
        //uncomment below and update the code to test fetchKites
        //instance.fetchKites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchMyPermissions', function() {
      it('should call fetchMyPermissions successfully', function(done) {
        //uncomment below and update the code to test fetchMyPermissions
        //instance.fetchMyPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchMyPermissionsAndRoles', function() {
      it('should call fetchMyPermissionsAndRoles successfully', function(done) {
        //uncomment below and update the code to test fetchMyPermissionsAndRoles
        //instance.fetchMyPermissionsAndRoles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchMySessions', function() {
      it('should call fetchMySessions successfully', function(done) {
        //uncomment below and update the code to test fetchMySessions
        //instance.fetchMySessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchOAuthInfo', function() {
      it('should call fetchOAuthInfo successfully', function(done) {
        //uncomment below and update the code to test fetchOAuthInfo
        //instance.fetchOAuthInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchOtaToken', function() {
      it('should call fetchOtaToken successfully', function(done) {
        //uncomment below and update the code to test fetchOtaToken
        //instance.fetchOtaToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchPaymentMethods', function() {
      it('should call fetchPaymentMethods successfully', function(done) {
        //uncomment below and update the code to test fetchPaymentMethods
        //instance.fetchPaymentMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchRelativeGroups', function() {
      it('should call fetchRelativeGroups successfully', function(done) {
        //uncomment below and update the code to test fetchRelativeGroups
        //instance.fetchRelativeGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchRole', function() {
      it('should call fetchRole successfully', function(done) {
        //uncomment below and update the code to test fetchRole
        //instance.fetchRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generate2FactorAuthKey', function() {
      it('should call generate2FactorAuthKey successfully', function(done) {
        //uncomment below and update the code to test generate2FactorAuthKey
        //instance.generate2FactorAuthKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ignoreInvitation', function() {
      it('should call ignoreInvitation successfully', function(done) {
        //uncomment below and update the code to test ignoreInvitation
        //instance.ignoreInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isEmailVerified', function() {
      it('should call isEmailVerified successfully', function(done) {
        //uncomment below and update the code to test isEmailVerified
        //instance.isEmailVerified(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isFollowing', function() {
      it('should call isFollowing successfully', function(done) {
        //uncomment below and update the code to test isFollowing
        //instance.isFollowing(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markUserAsExempt', function() {
      it('should call markUserAsExempt successfully', function(done) {
        //uncomment below and update the code to test markUserAsExempt
        //instance.markUserAsExempt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modify', function() {
      it('should call modify successfully', function(done) {
        //uncomment below and update the code to test modify
        //instance.modify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('one', function() {
      it('should call one successfully', function(done) {
        //uncomment below and update the code to test one
        //instance.one(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pushNotification', function() {
      it('should call pushNotification successfully', function(done) {
        //uncomment below and update the code to test pushNotification
        //instance.pushNotification(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setEmailPreferences', function() {
      it('should call setEmailPreferences successfully', function(done) {
        //uncomment below and update the code to test setEmailPreferences
        //instance.setEmailPreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setup2FactorAuth', function() {
      it('should call setup2FactorAuth successfully', function(done) {
        //uncomment below and update the code to test setup2FactorAuth
        //instance.setup2FactorAuth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('some', function() {
      it('should call some successfully', function(done) {
        //uncomment below and update the code to test some
        //instance.some(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('someWithRelationship', function() {
      it('should call someWithRelationship successfully', function(done) {
        //uncomment below and update the code to test someWithRelationship
        //instance.someWithRelationship(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unblockUser', function() {
      it('should call unblockUser successfully', function(done) {
        //uncomment below and update the code to test unblockUser
        //instance.unblockUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlinkOauth', function() {
      it('should call unlinkOauth successfully', function(done) {
        //uncomment below and update the code to test unlinkOauth
        //instance.unlinkOauth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlags', function() {
      it('should call updateFlags successfully', function(done) {
        //uncomment below and update the code to test updateFlags
        //instance.updateFlags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verifyEmailByUsername', function() {
      it('should call verifyEmailByUsername successfully', function(done) {
        //uncomment below and update the code to test verifyEmailByUsername
        //instance.verifyEmailByUsername(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
