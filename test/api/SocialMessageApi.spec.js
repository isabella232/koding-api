/**
 * Koding API
 * Koding API for integrating your application with Koding services
 *
 * OpenAPI spec version: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KodingApi);
  }
}(this, function(expect, KodingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KodingApi.SocialMessageApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SocialMessageApi', function() {
    describe('byId', function() {
      it('should call byId successfully', function(done) {
        //uncomment below and update the code to test byId
        //instance.byId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bySlug', function() {
      it('should call bySlug successfully', function(done) {
        //uncomment below and update the code to test bySlug
        //instance.bySlug(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callDelete', function() {
      it('should call callDelete successfully', function(done) {
        //uncomment below and update the code to test callDelete
        //instance.callDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('edit', function() {
      it('should call edit successfully', function(done) {
        //uncomment below and update the code to test edit
        //instance.edit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetch', function() {
      it('should call fetch successfully', function(done) {
        //uncomment below and update the code to test fetch
        //instance.fetch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchDataFromEmbedly', function() {
      it('should call fetchDataFromEmbedly successfully', function(done) {
        //uncomment below and update the code to test fetchDataFromEmbedly
        //instance.fetchDataFromEmbedly(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchPrivateMessageCount', function() {
      it('should call fetchPrivateMessageCount successfully', function(done) {
        //uncomment below and update the code to test fetchPrivateMessageCount
        //instance.fetchPrivateMessageCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fetchPrivateMessages', function() {
      it('should call fetchPrivateMessages successfully', function(done) {
        //uncomment below and update the code to test fetchPrivateMessages
        //instance.fetchPrivateMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initPrivateMessage', function() {
      it('should call initPrivateMessage successfully', function(done) {
        //uncomment below and update the code to test initPrivateMessage
        //instance.initPrivateMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('like', function() {
      it('should call like successfully', function(done) {
        //uncomment below and update the code to test like
        //instance.like(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLikers', function() {
      it('should call listLikers successfully', function(done) {
        //uncomment below and update the code to test listLikers
        //instance.listLikers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReplies', function() {
      it('should call listReplies successfully', function(done) {
        //uncomment below and update the code to test listReplies
        //instance.listReplies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('paymentSubscribe', function() {
      it('should call paymentSubscribe successfully', function(done) {
        //uncomment below and update the code to test paymentSubscribe
        //instance.paymentSubscribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('post', function() {
      it('should call post successfully', function(done) {
        //uncomment below and update the code to test post
        //instance.post(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reply', function() {
      it('should call reply successfully', function(done) {
        //uncomment below and update the code to test reply
        //instance.reply(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search', function() {
      it('should call search successfully', function(done) {
        //uncomment below and update the code to test search
        //instance.search(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendPrivateMessage', function() {
      it('should call sendPrivateMessage successfully', function(done) {
        //uncomment below and update the code to test sendPrivateMessage
        //instance.sendPrivateMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlike', function() {
      it('should call unlike successfully', function(done) {
        //uncomment below and update the code to test unlike
        //instance.unlike(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
